{"entries":[{"timestamp":1730898361954,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"microphone"],[1,"radio"],[0,"\": \""]],"start1":93,"start2":93,"length1":18,"length2":13},{"diffs":[[0,"   \""],[-1,"BME280\": \"github:makecode-extensions/bme280#v1.1.0\",\n        \"SSD1306_OLED\": \"github:tinkertanker/pxt-oled-ssd1306#v2.0.14\","],[1,"microphone\": \"*\""],[0,"\n    "],[1,"},\n"],[0,"    \""],[-1,"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[1,"files\": ["],[0,"\n    "],[-1,"},\n"],[0,"    \""],[-1,"files\": ["],[1,"main.blocks\","],[0,"\n   "]],"start1":115,"start2":115,"length1":213,"length2":69},{"diffs":[[0,".md\""],[-1,",\n        \"apds9960.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":215,"start2":215,"length1":112,"length2":44}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"apds9960.ts","value":"/*\nRiven\nload dependency\n\"apds9960\": \"file:../pxt-apds9960\"\n*/\n\n\n//% color=\"#31C7D5\" weight=10 icon=\"\\uf06e\"\nnamespace apds9960 {\n    const ADDR = 0x39\n    const APDS9960_RAM = 0x00\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_WTIME = 0x83\n    const APDS9960_AILTIL = 0x84\n    const APDS9960_AILTH = 0x85\n    const APDS9960_AIHTL = 0x86\n    const APDS9960_AIHTH = 0x87\n    const APDS9960_PILT = 0x89\n    const APDS9960_PIHT = 0x8B\n    const APDS9960_PERS = 0x8C\n    const APDS9960_CONFIG1 = 0x8D\n    const APDS9960_PPULSE = 0x8E\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_CONFIG2 = 0x90\n    const APDS9960_ID = 0x92\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_PDATA = 0x9C\n    const APDS9960_POFFSET_UR = 0x9D\n    const APDS9960_POFFSET_DL = 0x9E\n    const APDS9960_CONFIG3 = 0x9F\n    const APDS9960_GPENTH = 0xA0\n    const APDS9960_GEXTH = 0xA1\n    const APDS9960_GCONF1 = 0xA2\n    const APDS9960_GCONF2 = 0xA3\n    const APDS9960_GOFFSET_U = 0xA4\n    const APDS9960_GOFFSET_D = 0xA5\n    const APDS9960_GOFFSET_L = 0xA7\n    const APDS9960_GOFFSET_R = 0xA9\n    const APDS9960_GPULSE = 0xA6\n    const APDS9960_GCONF3 = 0xAA\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_GFLVL = 0xAE\n    const APDS9960_GSTATUS = 0xAF\n    const APDS9960_IFORCE = 0xE4\n    const APDS9960_PICLEAR = 0xE5\n    const APDS9960_CICLEAR = 0xE6\n    const APDS9960_AICLEAR = 0xE7\n    const APDS9960_GFIFO_U = 0xFC\n    const APDS9960_GFIFO_D = 0xFD\n    const APDS9960_GFIFO_L = 0xFE\n    const APDS9960_GFIFO_R = 0xFF\n\n    function i2cwrite(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2cread(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function rgb2hue(r: number, g: number, b: number): number {\n        // no float support for pxt ts\n        r = r * 100 / 255;\n        g = g * 100 / 255;\n        b = b * 100 / 255;\n\n        let max = Math.max(r, Math.max(g, b))\n        let min = Math.min(r, Math.min(g, b))\n        let c = max - min;\n        let hue = 0;\n        let segment = 0;\n        let shift = 0;\n        if (c != 0) {\n            switch (max) {\n                case r:\n                    segment = (g - b) * 100 / c;\n                    shift = 0;       // R° / (360° / hex sides)\n                    if (segment < 0) {          // hue > 180, full rotation\n                        shift = 360 / 60;         // R° / (360° / hex sides)\n                    }\n                    hue = segment + shift;\n                    break;\n                case g:\n                    segment = (b - r) * 100 / c;\n                    shift = 200;     // G° / (360° / hex sides)\n                    hue = segment + shift;\n                    break;\n                case b:\n                    segment = (r - g) * 100 / c;\n                    shift = 400;     // B° / (360° / hex sides)\n                    hue = segment + shift;\n                    break;\n            }\n\n        }\n        return hue * 60 / 100;\n    }\n\n    //% blockId=apds9960_init block=\"APDS9960 Init with integration time %integTime ms\"\n    //% weight=100\n    //% integTime.defl=11.12  // default inte time 4x2.78ms\n    //% integTime.min=2.78 integTime.max=712\n    export function Init(integTime: number): void {\n        if (integTime < 2.78) {\n            integTime = 2.78\n        }\n        if (integTime > 712) {\n            integTime = 712\n        }\n        let ATIMEValue = Math.round(256 - integTime / 2.78)\n        i2cwrite(ADDR, APDS9960_ATIME, ATIMEValue)  //set inte time\n        i2cwrite(ADDR, APDS9960_CONTROL, 0x03) // todo: make gain adjustable\n        i2cwrite(ADDR, APDS9960_ENABLE, 0x00) // put everything off\n        i2cwrite(ADDR, APDS9960_GCONF4, 0x00) // disable gesture mode\n        i2cwrite(ADDR, APDS9960_AICLEAR, 0x00) // clear all interrupt\n        // power on\n        i2cwrite(ADDR, APDS9960_ENABLE, 0x01) // clear all interrupt\n    }\n    /**\n     * Gets APDS9960 CHIP ID\n     * It should return 0xAB or 171\n     */\n    //% blockId=apds9960_getid block=\"ID\"\n    //% weight=99\n    export function id(): number {\n        let chipid = i2cread(ADDR, APDS9960_ID);\n        return chipid;\n    }\n    //% blockId=apds9960_colormode block=\"APDS9960 Color Mode\"\n    //% weight=98\n    export function ColorMode(): void {\n        let tmp = i2cread(ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite(ADDR, APDS9960_ENABLE, tmp);\n    }\n    //% blockId=apds9960_readcolor block=\"APDS9960 Get Color\"\n    //% weight=97\n    export function ReadColor(): number {\n        let tmp = i2cread(ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread(ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread(ADDR, APDS9960_CDATAL) + i2cread(ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread(ADDR, APDS9960_RDATAL) + i2cread(ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread(ADDR, APDS9960_GDATAL) + i2cread(ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread(ADDR, APDS9960_BDATAL) + i2cread(ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        let hue = rgb2hue(r, g, b);\n        return hue\n    }\n\n    //% blockId=apds9960_colorready block=\"APDS9960 Color ready\"\n    //% weight=96\n    export function Data_Ready(): number {\n        let tmp = i2cread(ADDR, APDS9960_STATUS) & 0x1;\n        return tmp;\n    }\n\n    //% blockId=apds9960_readred block=\"APDS9960 Get Red\"\n    //% weight=95\n    export function Read_Red(): number {\n        let r = i2cread(ADDR, APDS9960_RDATAL) + i2cread(ADDR, APDS9960_RDATAH) * 256;\n        return r\n    }\n    //% blockId=apds9960_readgreen block=\"APDS9960 Get Green\"\n    //% weight=94\n    export function Read_Green(): number {\n        let g = i2cread(ADDR, APDS9960_GDATAL) + i2cread(ADDR, APDS9960_GDATAH) * 256;\n        return g\n    }\n    //% blockId=apds9960_readblue block=\"APDS9960 Get Blue\"\n    //% weight=93\n    export function Read_Blue(): number {\n        let b = i2cread(ADDR, APDS9960_BDATAL) + i2cread(ADDR, APDS9960_BDATAH) * 256;\n        return b\n    }\n    //% blockId=apds9960_readambient block=\"APDS9960 Get Ambient\"\n    //% weight=92\n    export function Read_Ambient(): number {\n        let c = i2cread(ADDR, APDS9960_CDATAL) + i2cread(ADDR, APDS9960_CDATAH) * 256;\n        return c\n    }\n\n}\n"}]}],"snapshots":[{"timestamp":1730898361953,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"main\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1730898615061}